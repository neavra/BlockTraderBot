version: '3.8'

services:
  # Database
  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-tradingbot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tradingpass}
      POSTGRES_DB: ${POSTGRES_DB:-tradingbot_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - trading_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tradingbot}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache
  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Data Service
  data_service:
    build:
      context: .
      dockerfile: ./data/DockerFile
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-tradingbot}:${POSTGRES_PASSWORD:-tradingpass}@postgres:5432/${POSTGRES_DB:-tradingbot_db}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-guest}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./data:/app/data
      - ./shared:/app/shared
    networks:
      - trading_network
    restart: on-failure

  # Strategy Service
  strategy_service:
    build:
      context: .
      dockerfile: ./strategy/DockerFile
    depends_on:
      data_service:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-guest}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./strategy:/app/strategy
      - ./shared:/app/shared
    networks:
      - trading_network
    restart: on-failure

  # Execution Service
  execution_service:
    build:
      context: .
      dockerfile: ./execution/DockerFile
    depends_on:
      strategy_service:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-tradingbot}:${POSTGRES_PASSWORD:-tradingpass}@postgres:5432/${POSTGRES_DB:-tradingbot_db}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-guest}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./execution:/app/execution
      - ./shared:/app/shared
    networks:
      - trading_network
    restart: on-failure

  # Monitoring Service
  monitoring_service:
    build:
      context: .
      dockerfile: ./monitoring/DockerFile
    depends_on:
      data_service:
        condition: service_started
      strategy_service:
        condition: service_started
      execution_service:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-tradingbot}:${POSTGRES_PASSWORD:-tradingpass}@postgres:5432/${POSTGRES_DB:-tradingbot_db}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-guest}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8000:8000"  # Expose monitoring dashboard
    volumes:
      - ./monitoring:/app/monitoring
      - ./shared:/app/shared
    networks:
      - trading_network
    restart: on-failure


networks:
  trading_network:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data: