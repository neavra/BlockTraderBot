from dataclasses import dataclass, field
from datetime import datetime
from typing import Dict, Any, Optional


@dataclass
class SignalDto:
    """
    Data Transfer Object for trading signals.
    Represents a trading signal generated by the strategy layer.
    """
    # Basic identification
    id: Optional[int] = None
    strategy_name: str = ""
    exchange: str = ""
    symbol: str = ""
    timeframe: str = ""
    
    # Signal details
    direction: str = ""  # 'long' or 'short'
    signal_type: str = ""  # 'entry', 'exit', 'adjust'
    price_target: Optional[float] = None
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    risk_reward_ratio: Optional[float] = None
    confidence_score: Optional[float] = None
    
    # Signal state
    execution_status: str = "pending"  # 'pending', 'executed', 'expired', 'cancelled'
    
    # Timestamps
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    
    # Additional data
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    # Reference to the indicator (e.g., order block) that generated this signal
    indicator_id: Optional[int] = None
    
    def __post_init__(self):
        """Initialize timestamps if not provided"""
        if self.created_at is None:
            self.created_at = datetime.now()
        if self.updated_at is None:
            self.updated_at = datetime.now()
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for serialization"""
        result = {}
        for key, value in self.__dict__.items():
            # Handle datetime objects
            if isinstance(value, datetime):
                result[key] = value.isoformat()
            else:
                result[key] = value
        return result
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'SignalDto':
        """Create a SignalDto from a dictionary"""
        # Handle datetime strings
        for date_field in ['created_at', 'updated_at']:
            if date_field in data and isinstance(data[date_field], str):
                try:
                    data[date_field] = datetime.fromisoformat(data[date_field].replace('Z', '+00:00'))
                except (ValueError, TypeError):
                    data[date_field] = None
        
        return cls(**data)
    
    @classmethod
    def to_event(cls, signal: 'SignalDto', event_type: str = "signal_generated") -> Dict[str, Any]:
        """
        Create an event message from a SignalDto
        
        Args:
            signal: The signal to convert
            event_type: Type of event ('signal_generated', 'signal_updated', etc.)
            
        Returns:
            Dictionary containing the event data
        """
        return {
            "event_type": event_type,
            "timestamp": datetime.now().isoformat(),
            "source": "strategy_layer",
            "payload": signal.to_dict()
        }