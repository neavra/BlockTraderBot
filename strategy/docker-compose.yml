version: '3.8'
services:
  # Strategy layer service
  strategy:
    image: python:3.9
    container_name: strategy-service
    restart: always
    depends_on:
      - db
      - rabbitmq
      - cache
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@db:5432/tradingbot}
      - RABBITMQ_HOST=${RABBITMQ_HOST:-rabbitmq}
      - RABBITMQ_PORT=${RABBITMQ_PORT:-5672}
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-guest}
      - REDIS_HOST=${REDIS_HOST:-cache}
      - REDIS_PORT=${REDIS_PORT:-6379}
    networks:
      - trading-network
    volumes:
      - ..:/app
    working_dir: /app
    command: >
      bash -c "pip install -r strategy/requirements.txt &&
               python -m strategy.main"
    
  # Database - Same as in data layer
  db:
    image: postgres:latest
    restart: always
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-tradingbot}
    networks:
      - trading-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
  
  # RabbitMQ - Same as in data layer
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
    networks:
      - trading-network
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"  # AMQP protocol port
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672" # Management UI
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # Redis cache - Same as in data layer
  cache:
    image: redis:7-alpine
    container_name: redis-strategy
    restart: always
    command: redis-server
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  trading-network:
    driver: bridge
    name: trading-network

volumes:
  postgres_data:
  redis_data: